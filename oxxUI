-- 服务
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local input = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local coreGui = game:GetService("CoreGui")
local uis = game:GetService("UserInputService")

-- 变量
local lp = players.LocalPlayer
local viewport = workspace.CurrentCamera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

-- 检测是否为移动设备
local isMobile = uis.TouchEnabled and (viewport.X < 1024 or viewport.Y < 768)

-- 基础尺寸
local BASE_SIZE = isMobile and {Width = 300, Height = 400} or {Width = 525, Height = 318}
local NAV_WIDTH = isMobile and 80 or 120
local MIN_SIZE = {Width = 200, Height = 250}
local MAX_SIZE = {Width = viewport.X * 0.9, Height = viewport.Y * 0.9}

local Library = {}

function Library:validate(defaults, brackets)
 for i, v in pairs(defaults) do
 if brackets[i] == nil then
 brackets[i] = v
 end
 end
 return brackets
end

function Library:tween(object, goal, callback)
 local tween = tweenService:Create(object, tweenInfo, goal)
 tween.Completed:Connect(callback or function() end)
 tween:Play()
end

function Library:CreateLib(brackets)
 brackets = Library:validate({
 name = "PeaCOCK UI Library"
 }, brackets or {})

 local GUI = {
 CurrentTab = nil,
 Tabs = {},
 CurrentSize = {Width = BASE_SIZE.Width, Height = BASE_SIZE.Height},
 TouchData = {
 Dragging = false,
 Resizing = false,
 LongPress = false,
 StartTime = 0,
 LastPos = nil,
 InitialPos = nil
 }
 }

 -- 主框架/顶部栏
 do
 GUI["1"] = Instance.new("ScreenGui", runService:IsStudio() and players.LocalPlayer:WaitForChild("PlayerGui") or coreGui)
 GUI["1"]["IgnoreGuiInset"] = true
 GUI["1"]["ResetOnSpawn"] = true
 GUI["1"]["Name"] = [[Peacock]]

 GUI["6g"] = Instance.new("Frame", GUI["1"])
 GUI["6g"]["ZIndex"] = 500
 GUI["6g"]["BorderSizePixel"] = 0
 GUI["6g"]["BackgroundTransparency"] = 1
 GUI["6g"]["Size"] = UDim2.new(0, BASE_SIZE.Width, 0, 30)
 GUI["6g"]["Position"] = UDim2.new(0.5, -BASE_SIZE.Width/2, 0.5, -BASE_SIZE.Height/2)
 GUI["6g"]["Name"] = [[Drag]]
 GUI["6g"]["Active"] = true

 -- 调整大小函数
 local function updateSize(newWidth, newHeight)
 GUI.CurrentSize.Width = math.clamp(newWidth, MIN_SIZE.Width, MAX_SIZE.Width)
 GUI.CurrentSize.Height = math.clamp(newHeight, MIN_SIZE.Height, MAX_SIZE.Height)
 GUI["2"].Size = UDim2.new(0, GUI.CurrentSize.Width, 0, GUI.CurrentSize.Height)
 GUI["6g"].Size = UDim2.new(0, GUI.CurrentSize.Width, 0, 30)
 GUI["5"].Size = UDim2.new(0, GUI.CurrentSize.Width, 0, 30)
 GUI["resizeHandle"].Position = UDim2.new(1, -20, 1, -20)
 end

 -- 拖拽和缩放处理
 GUI["6g"].InputBegan:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
 GUI.TouchData.StartTime = tick()
 GUI.TouchData.LastPos = input.Position
 GUI.TouchData.InitialPos = GUI["6g"].Position
 GUI.TouchData.Dragging = true
 end
 end)

 GUI["6g"].InputChanged:Connect(function(input)
 if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) and GUI.TouchData.Dragging then
 local delta = input.Position - GUI.TouchData.LastPos
 local newPos = UDim2.new(
 0, math.clamp(GUI.TouchData.InitialPos.X.Offset + delta.X, 0, viewport.X - GUI.CurrentSize.Width),
 0, math.clamp(GUI.TouchData.InitialPos.Y.Offset + delta.Y, 0, viewport.Y - GUI.CurrentSize.Height)
 )
 GUI["6g"].Position = newPos
 end
 end)

 GUI["6g"].InputEnded:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
 GUI.TouchData.Dragging = false
 if tick() - GUI.TouchData.StartTime > 0.5 and not GUI.TouchData.LongPress then
 GUI.TouchData.LongPress = true
 print("长按检测到")
 end
 GUI.TouchData.LongPress = false
 end
 end)

 -- 右下角缩放手柄
 GUI["resizeHandle"] = Instance.new("Frame", GUI["6g"])
 GUI["resizeHandle"]["BackgroundColor3"] = Color3.fromRGB(101, 49, 6)
 GUI["resizeHandle"]["Size"] = UDim2.new(0, 20, 0, 20)
 GUI["resizeHandle"]["Position"] = UDim2.new(1, -20, 1, -20)
 GUI["resizeHandle"]["ZIndex"] = 501
 GUI["resizeHandle"]["Name"] = "ResizeHandle"
 local corner = Instance.new("UICorner", GUI["resizeHandle"])
 corner.CornerRadius = UDim.new(0, 4)

 GUI["resizeHandle"].InputBegan:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
 GUI.TouchData.Resizing = true
 GUI.TouchData.LastPos = input.Position
 end
 end)

 GUI["resizeHandle"].InputChanged:Connect(function(input)
 if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) and GUI.TouchData.Resizing then
 local delta = input.Position - GUI.TouchData.LastPos
 updateSize(GUI.CurrentSize.Width + delta.X, GUI.CurrentSize.Height + delta.Y)
 GUI.TouchData.LastPos = input.Position
 end
 end)

 GUI["resizeHandle"].InputEnded:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
 GUI.TouchData.Resizing = false
 end
 end)

 -- 隐藏/显示按钮
 GUI["5e"] = Instance.new("TextButton", GUI["1"])
 GUI["5e"]["TextSize"] = isMobile and 18 or 15
 GUI["5e"]["BackgroundColor3"] = Color3.fromRGB(101, 49, 6)
 GUI["5e"]["TextColor3"] = Color3.fromRGB(255, 255, 255)
 GUI["5e"]["Size"] = isMobile and UDim2.new(0.2, 0, 0.06, 0) or UDim2.new(0.134, 0, 0.034, 0)
 GUI["5e"]["Name"] = [[HideFrames]]
 GUI["5e"]["Text"] = [[隐藏/显示]]
 GUI["5e"]["Font"] = Enum.Font.Ubuntu
 GUI["5e"]["Position"] = UDim2.new(0.4, 0, 0.02, 0)
 GUI["5e"].MouseButton1Click:Connect(function()
 GUI["2"]["Visible"] = not GUI["2"]["Visible"]
 end)
 GUI["5e"].TouchTap:Connect(function()
 GUI["2"]["Visible"] = not GUI["2"]["Visible"]
 end)

 GUI["5f"] = Instance.new("UICorner", GUI["5e"])
 GUI["5f"]["CornerRadius"] = UDim.new(0, 4)

 -- 主框架
 GUI["2"] = Instance.new("Frame", GUI["6g"])
 GUI["2"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 15)
 GUI["2"]["Size"] = UDim2.new(0, BASE_SIZE.Width, 0, BASE_SIZE.Height)
 GUI["2"]["Name"] = [[Main]]

 GUI["3"] = Instance.new("UICorner", GUI["2"])
 GUI["3"]["CornerRadius"] = UDim.new(0, 6)

 -- 内容容器
 GUI["1b"] = Instance.new("Frame", GUI["2"])
 GUI["1b"]["BorderSizePixel"] = 0
 GUI["1b"]["BackgroundTransparency"] = 1
 GUI["1b"]["Size"] = UDim2.new(1, -NAV_WIDTH-6, 1, -42)
 GUI["1b"]["Position"] = UDim2.new(0, NAV_WIDTH+6, 0, 36)
 GUI["1b"]["Name"] = [[ContentContainer]]

 GUI["4"] = Instance.new("UIPadding", GUI["1b"])
 GUI["4"]["Padding"] = UDim.new(0, 1)

 -- 顶部栏
 GUI["5"] = Instance.new("Frame", GUI["2"])
 GUI["5"]["BackgroundColor3"] = Color3.fromRGB(101, 49, 6)
 GUI["5"]["Size"] = UDim2.new(0, BASE_SIZE.Width, 0, 30)
 GUI["5"]["Name"] = [[TopBar]]

 GUI["6"] = Instance.new("UICorner", GUI["5"])

 GUI["8"] = Instance.new("TextLabel", GUI["5"])
 GUI["8"]["TextXAlignment"] = Enum.TextXAlignment.Left
 GUI["8"]["BackgroundTransparency"] = 1
 GUI["8"][" TextSize"] = isMobile and 14 or 17
 GUI["8"]["TextColor3"] = Color3.fromRGB(255, 255, 255)
 GUI["8"]["Size"] = UDim2.new(0.5, 0, 1, 0)
 GUI["8"]["Text"] = brackets["name"]
 GUI["8"]["Font"] = Enum.Font.Gotham
 GUI["9"] = Instance.new("UIPadding", GUI["8"])
 GUI["9"]["PaddingLeft"] = UDim.new(0, 8)

 GUI["a"] = Instance.new("ImageButton", GUI["5"])
 GUI["a"]["Image"] = "rbxassetid://3926305904"
 GUI["a"]["ImageRectSize"] = Vector2.new(36, 36)
 GUI["a"]["Size"] = isMobile and UDim2.new(0, 35, 0, 35) or UDim2.new(0, 27, 0, 27)
 GUI["a"]["Name"] = "Close"
 GUI["a"]["ImageRectOffset"] = Vector2.new(924, 724)
 GUI["a"]["BackgroundTransparency"] = 1
 GUI["a"]["Position"] = UDim2.new(0.95, 0, 0, 0)
 GUI["a"].MouseButton1Click:Connect(function()
 GUI["1"]:Destroy()
 end)
 GUI["a"].TouchTap:Connect(function()
 GUI["1"]:Destroy()
 end)
 end

 -- 导航栏
 do
 GUI["d"] = Instance.new("Frame", GUI["2"])
 GUI["d"]["BackgroundColor3"] = Color3.fromRGB(137, 66, 9)
 GUI["d"]["Size"] = UDim2.new(0, NAV_WIDTH, 1, -30)
 GUI["d"]["Position"] = UDim2.new(0, 0, 0, 30)
 GUI["d"]["Name"] = [[Navigation]]

 GUI["e"] = Instance.new("UICorner", GUI["d"])
 GUI["e"]["CornerRadius"] = UDim.new(0, 6)

 GUI["f"] = Instance.new("Frame", GUI["d"])
 GUI["f"]["BackgroundTransparency"] = 1
 GUI["f"]["Size"] = UDim2.new(1, 0, 1, 0)
 GUI["f"]["Name"] = [[ButtonHolder]]

 GUI["h"] = Instance.new("UIListLayout", GUI["f"])
 GUI["h"]["Padding"] = UDim.new(0, 1)
 GUI["h"]["SortOrder"] = Enum.SortOrder.LayoutOrder

 GUI["g"] = Instance.new("UIPadding", GUI["f"])
 GUI["g"]["PaddingTop"] = UDim.new(0, 8)
 end

 function GUI:NewTab(brackets)
 brackets = Library:validate({
 name = "预览标签",
 icon = "rbxassetid://3926305904"
 }, brackets or {})

 local Tab = {
 Hover = false,
 Active = false,
 Index = #GUI.Tabs + 1
 }
 table.insert(GUI.Tabs, Tab)

 -- 渲染
 do
 Tab["11"] = Instance.new("TextLabel", GUI["f"])
 Tab["11"]["TextXAlignment"] = Enum.TextXAlignment.Left
 Tab["11"]["BackgroundTransparency"] = 1
 Tab["11"]["TextSize"] = isMobile and 10 or 12
 Tab["11"]["TextColor3"] = Color3.fromRGB(200, 200, 200)
 Tab["11"]["Size"] = UDim2.new(1, 0, 0, isMobile and 30 or 24)
 Tab["11"]["Text"] = brackets.name
 Tab["11"]["Font"] = Enum.Font.Ubuntu

 Tab["12"] = Instance.new("UIPadding", Tab["11"])
 Tab["12"]["PaddingLeft"] = UDim.new(0, isMobile and 22 or 28)

 Tab["13"] = Instance.new("ImageLabel", Tab["11"])
 Tab["13"]["ImageColor3"] = Color3.fromRGB(200, 200, 200)
 Tab["13"]["Image"] = brackets.icon
 Tab["13"]["ImageRectSize"] = Vector2.new(36, 36)
 Tab["13"]["Size"] = UDim2.new(0, isMobile and 20 or 25, 0, isMobile and 20 or 25)
 Tab["13"]["BackgroundTransparency"] = 1
 Tab["13"]["Position"] = UDim2.new(0, - (isMobile and 20 or 24), 0, isMobile and 5 or 0)

 Tab["1c"] = Instance.new("ScrollingFrame", GUI["1b"])
 Tab["1c"]["BackgroundTransparency"] = 1
 Tab["1c"]["Size"] = UDim2.new(1, 0, 1, 0)
 Tab["1c"]["ScrollBarThickness"] = isMobile and 4 or 0
 Tab["1c"]["Name"] = brackets.name
 Tab["1c"]["Visible"] = false
 Tab["1c"]["CanvasSize"] = UDim2.new(0, 0, 0, 0)
 Tab["1c"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y

 Tab["24"] = Instance.new("UIListLayout", Tab["1c"])
 Tab["24"]["Padding"] = UDim.new(0, 6)

 Tab[" 15"] = Instance.new("UIPadding", Tab["1c"])
 Tab["15"]["Padding"] = UDim.new(0, 1)
 end

 function Tab:Activate()
 if not Tab.Active then
 if GUI.CurrentTab then
 GUI.CurrentTab:Deactivate()
 end
 Tab.Active = true
 Library:tween(Tab["11"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
 Library:tween(Tab["13"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
 Tab["1c"].Visible = true
 GUI.CurrentTab = Tab
 end
 end

 function Tab:Deactivate()
 if Tab.Active then
 Tab.Active = false
 Tab.Hover = false
 Library:tween(Tab["11"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
 Library:tween(Tab["13"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
 Tab["1c"].Visible = false
 end
 end

 -- 滑动切换标签页
 local swipeStartX
 Tab["1c"].InputBegan:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.Touch then
 swipeStartX = input.Position.X
 end
 end)

 Tab["1c"].InputEnded:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.Touch and swipeStartX then
 local deltaX = input.Position.X - swipeStartX
 if math.abs(deltaX) > 50 then
 local newIndex = deltaX > 0 and Tab.Index - 1 or Tab.Index + 1
 newIndex = math.clamp(newIndex, 1, #GUI.Tabs)
 GUI.Tabs[newIndex]:Activate()
 end
 swipeStartX = nil
 end
 end)

 Tab["11"].MouseEnter:Connect(function()
 Tab.Hover = true
 if not Tab.Active then
 Library:tween(Tab["11"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
 Library:tween(Tab["13"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
 end
 end)

 Tab["11"].MouseLeave:Connect(function()
 Tab.Hover = false
 if not Tab.Active then
 Library:tween(Tab["11"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
 Library:tween(Tab["13"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
 end
 end)

 Tab["11"].InputBegan:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
 Tab:Activate()
 end
 end)

 if not GUI.CurrentTab then
 Tab:Activate()
 end

 function Tab:NewButton(brackets)
 brackets = Library:validate({
 name = "新按钮",
 callback = function() end
 }, brackets or {})

 local Button = {
 Hover = false,
 MouseDown = false
 }

 Button["1d"] = Instance.new("Frame", Tab["1c"])
 Button["1d"]["BackgroundColor3"] = Color3.fromRGB(137, 66, 9)
 Button["1d"]["Size"] = UDim2.new(1, 0, 0, isMobile and 40 or 32)
 Button["1d"]["Name"] = [[Button]]

 Button["1e"] = Instance.new("UICorner", Button["1d"])
 Button["1e"]["CornerRadius"] = UDim.new(0, 4)

 Button["16"] = Instance.new("UIPadding", Button["1d"])
 Button["16"]["Padding"] = UDim.new(0, 6)

 Button["1f"] = Instance.new("UIStroke", Button["1d"])
 Button["1f"]["Color"] = Color3.fromRGB(82, 82, 82)
 Button["1f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border

 Button["18"] = Instance.new("TextLabel", Button["1d"])
 Button["18"]["TextXAlignment"] = Enum.TextXAlignment.Center
 Button["18"]["BackgroundTransparency"] = 1
 Button["18"]["TextSize"] = isMobile and 16 or 14
 Button["18"]["TextColor3"] = Color3.fromRGB(255, 255, 255)
 Button["18"]["Size"] = UDim2.new(1, 0, 1, 0)
 Button["18"]["Text"] = brackets.name
 Button["18"]["Font"] = Enum.Font.Ubuntu

 Button["1d"].MouseEnter:Connect(function()
 Button.Hover = true
 Library:tween(Button["1f"], {Color = Color3.fromRGB(102, 102, 102)})
 end)

 Button["1d"].MouseLeave:Connect(function()
 Button.Hover = false
 if not Button.MouseDown then
 Library:tween(Button["1f"], {Color = Color3.fromRGB(82, 82, 82)})
 end
 end)

 Button["1d"].InputBegan:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
 Button.MouseDown = true
 Library:tween(Button["1d"], {BackgroundColor3 = Color3.fromRGB(100, 48, 5)})
 Library:tween(Button["1f"], {Color = Color3.fromRGB(200, 200, 200)})
 brackets.callback()
 end
 end)

 Button["1d"].InputEnded:Connect(function(input)
 if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
 Button.MouseDown = false
 Library:tween(Button["1d"], {BackgroundColor3 = Color3.fromRGB(137, 66, 9)})
 Library:tween(Button["1f"], {Color = Button.Hover and Color3.fromRGB(102, 102, 102) or Color3.fromRGB(82, 82, 82)})
 end
 end)

 function Button:SetText(text)
 brackets.name = text
 Button["18"].Text = text
 end

 return Button
 end

 return Tab
 end

 return GUI
end

return Library
